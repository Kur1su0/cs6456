diff -r /u/zw9ga/p1-kernel/src/lesson04a/include/fork.h test_l4a/include/fork.h
5c5
< 
---
> int copy_idle_process(unsigned long fn, unsigned long arg);
diff -r /u/zw9ga/p1-kernel/src/lesson04a/include/irq.h test_l4a/include/irq.h
8a9
> void _WFI( void );
diff -r /u/zw9ga/p1-kernel/src/lesson04a/include/sched.h test_l4a/include/sched.h
15a16,18
> #define TASK_WAIT				1
> #define TASK_EXIT				2
> #define TASK_IDLE				42937402
20a24
> int wait_array[NR_TASKS]; //index of waiting task.
51a56,57
> extern void change_to_state(int state_num);
> extern void init_wait_array();
Only in test_l4a/: log
diff -r /u/zw9ga/p1-kernel/src/lesson04a/Makefile test_l4a/Makefile
3,4c3,4
< COPS = -Wall -nostdlib -nostartfiles -ffreestanding -Iinclude -mgeneral-regs-only -g -O0
< ASMOPS = -Iinclude  -g
---
> COPS = -Wall -nostdlib -nostartfiles -ffreestanding -Iinclude -mgeneral-regs-only -g -O0 -DUSE_QEMU
> ASMOPS = -Iinclude  -g -DUSE_QEMU
29,30c29,30
< kernel8.img: $(SRC_DIR)/linker.ld $(OBJ_FILES)
< 	$(ARMGNU)-ld -T $(SRC_DIR)/linker.ld -o $(BUILD_DIR)/kernel8.elf  $(OBJ_FILES)
---
> kernel8.img: $(SRC_DIR)/linker-qemu.ld $(OBJ_FILES)
> 	$(ARMGNU)-ld -T $(SRC_DIR)/linker-qemu.ld -o $(BUILD_DIR)/kernel8.elf  $(OBJ_FILES)
Only in test_l4a/: run_qemu.sh
diff -r /u/zw9ga/p1-kernel/src/lesson04a/src/entry.S test_l4a/src/entry.S
186a187
> 	eret
diff -r /u/zw9ga/p1-kernel/src/lesson04a/src/fork.c test_l4a/src/fork.c
3a4
> #include "printf.h"
14a16,61
> 	p->counter = p->priority;
> //	p->preempt_count = 1; //disable preemtion until schedule_tail
> 
> 	p->cpu_context.x19 = fn;
> 	p->cpu_context.x20 = arg;
> 	p->cpu_context.pc = (unsigned long)ret_from_fork;
> 	p->cpu_context.sp = (unsigned long)p + THREAD_SIZE;
> 	int pid = nr_tasks++;
> 	task[pid] = p;	
> //	preempt_enable();
> 	return 0;
> }
> 
> int copy_idle_process(unsigned long fn, unsigned long arg)
> {
> //	preempt_disable();
> 	struct task_struct *p;
> 
> 	p = (struct task_struct *) get_free_page();
> 	if (!p)
> 		return 1;
> 	p->priority = current->priority;
> 	p->state = TASK_IDLE;
> 	p->counter = p->priority;
> //	p->preempt_count = 1; //disable preemtion until schedule_tail
> 
> 	p->cpu_context.x19 = fn;
> 	p->cpu_context.x20 = arg;
> 	p->cpu_context.pc = (unsigned long)ret_from_fork;
> 	p->cpu_context.sp = (unsigned long)p + THREAD_SIZE;
> 	int pid = nr_tasks++;
> 	task[pid] = p;	
> //	preempt_enable();
> 	return 0;
> }
> 
> int copy_wait_process(unsigned long fn, unsigned long arg)
> {
> //	preempt_disable();
> 	struct task_struct *p;
> 
> 	p = (struct task_struct *) get_free_page();
> 	if (!p)
> 		return 1;
> 	p->priority = current->priority;
> 	p->state = TASK_WAIT;
diff -r /u/zw9ga/p1-kernel/src/lesson04a/src/irq.c test_l4a/src/irq.c
29,33c29,33
< //void enable_interrupt_controller()
< //{
< //    // Enables Core 0 Timers interrupt control for the generic timer
< //    put32(TIMER_INT_CTRL_0, TIMER_INT_CTRL_0_VALUE);
< //}
---
> void enable_interrupt_controller()
> {
>     // Enables Core 0 Timers interrupt control for the generic timer
>     put32(TIMER_INT_CTRL_0, TIMER_INT_CTRL_0_VALUE);
> }
40,42c40,48
< 	printf("We do not expect pending irq to happen: %x\r\n", irq);
< 	while (1)
< 		;
---
>     switch (irq) {
>         case (GENERIC_TIMER_INTERRUPT):
>             handle_generic_timer_irq();
>             break;
>         default:
>             printf("Unknown pending irq: %x\r\n", irq);
>     }
>     
> 
diff -r /u/zw9ga/p1-kernel/src/lesson04a/src/irq.S test_l4a/src/irq.S
15a16,20
> 
> .global _WFI
> _WFI:
> 	WFI
> 	ret
diff -r /u/zw9ga/p1-kernel/src/lesson04a/src/kernel.c test_l4a/src/kernel.c
8a9,45
> #define RUN_LENS 9
> #define WAIT_LENS 11
> 
> 
> #define CP_PROC(CONTANT, PROC_NUM) \
> { \
> res = copy_process((unsigned long)&process, (unsigned long)CONTANT); \
> if (res != 0) { \
> printf("error while starting process %d",PROC_NUM); \
> return; \
> } \
> } 
> 
> void idle_process(char *array){
> 	while(1){	
> 	printf("TASK IDLE.1: deep sleep...\n");
> 	_WFI();
> 	printf("TASK IDLE.2: im back! \n");
> 	schedule();
> 	}
> }
> 
> void wait_process(char* array){
> /*
> 	for (int i = 0; i < WAIT_LENS; i++){
> 		uart_send(array[i]);
> 		delay(5000000);
> 	}
>  */
> 	printf("Task B.1: Before changing to WAIT STATE \n");
> 
> 	change_to_state(TASK_WAIT);
> 	printf("Task B.2: Back from WAIT STATE\n");
> 	change_to_state(TASK_EXIT);
> 	
> }
> 
11,12c48,50
< 	while (1){
< 		for (int i = 0; i < 5; i++){
---
> 	//while (1){
> 	/*
> 		for (int i = 0; i < RUN_LENS; i++){
16,17c54,58
< 		schedule(); // yield
< 	}
---
>      	*/
> 		printf("Task A: Only run once\n");
> 		change_to_state(TASK_EXIT);
> 		//schedule(); // yield
> 	//}
27,32c68,78
< //	irq_vector_init();
< //	generic_timer_init();
< //	enable_interrupt_controller();
< //	enable_irq();
< 
< 	int res = copy_process((unsigned long)&process, (unsigned long)"12345");
---
> 	irq_vector_init();
> 	generic_timer_init();
> 	enable_interrupt_controller();
> 	init_wait_array();
> 	int res=-1 ;
> 	res = copy_idle_process((unsigned long)&idle_process, (unsigned long)"idlee");
> 	if (res != 0) {
> 		printf("error while starting process 1");
> 		return;
> 	}
> 	res = copy_process((unsigned long)&process, (unsigned long)"T1:runrun");
37c83,84
< 	res = copy_process((unsigned long)&process, (unsigned long)"abcde");
---
> 	
> 	res = copy_process((unsigned long)&wait_process, (unsigned long)"TB:waitwait");
41a89,91
> 	
> 
> 
42a93,96
> 
> 	enable_irq();
> 	//CP_PROC("qqqqq",3);
> 	//printf("proc 3: %d\n", res );
46a101
> 
diff -r /u/zw9ga/p1-kernel/src/lesson04a/src/sched.c test_l4a/src/sched.c
4a5,6
> 
> #define WAIT_CYCLE 3 // wait for cycle
24c26,27
< 	int next,c;
---
> 	int next,c, wait_ready_to_run_isFound=-1,back_to_idle_counter=-1;
> 	int running_flag=0;
25a29
> 	
28,29c32,34
< 		next = 0;
< 		for (int i = 0; i < NR_TASKS; i++){
---
> 		next = 1;
> 		wait_ready_to_run_isFound = -1;
> 		for (int i = 1; i < NR_TASKS; i++){
33a39
> 				break;
36c42,43
< 		if (c) {
---
> 		if(next!=1){
> 			//running_flag =1;
38a46,84
> 		//Check Wait State
> 		if(c==-1){
> 		back_to_idle_counter = 0;
> 		//IF only idle left
> 		//next = 1;
> 		//check Wait state and plus 1 for each
> 		for(int i =1;i <NR_TASKS;i++){
> 			p = task[i];
> 			if(p &&p->state == TASK_WAIT){
> 				if(wait_array[i]!=-1 &&
> 				   wait_array[i]!=0 &&
> 			           wait_array[i]%WAIT_CYCLE ==0){
> 
> 					printf("find task[%d] back from wait to running\n",i);
> 					back_to_idle_counter++;
> 					wait_array[i] = -1;
> 					p->state = TASK_RUNNING;
> 					
> 					if(wait_ready_to_run_isFound==-1){
> 						//next = running_flag==1?next:i;
> 						next = i;
> 						wait_ready_to_run_isFound = 1;
> 					}
> 					
> 				}
> 			//notify handler to increase
> 				else if(wait_array[i]==-1){
> 					wait_array[i]=0;
> 				printf("init task[%d] to wait\n",i);
> 				}
> 			}
> 
> 		}
> 
> 		if(back_to_idle_counter ==0) next = 1;
> 		break;
> 		}
> 		//printf("Need recharge\n");
> 		/*
43a90
> 			iii = i;
44a92
> 		*/
68a117,142
> void change_to_state(int state_num){
> 	switch(state_num){
> 		case TASK_WAIT:
> 			current->state = TASK_WAIT;
> 			printf("changed\n");
> 			break;
> 		case TASK_EXIT:
> 			current->state = TASK_EXIT;
> 			break;
> 		case TASK_RUNNING:
> 			current->state = TASK_RUNNING;
> 			break;
> 		
> 		default:
> 			printf("wrong state: %d\n",state_num);
> 	}
> 	schedule();
> 
> }
> 
> void init_wait_array(){
> 	for(int i=0; i <NR_TASKS; i++){
> 		wait_array[i]=-1;
> 	}
> 
> }
Only in test_l4a/src: timer.c
Only in test_l4a/src: timer.S
